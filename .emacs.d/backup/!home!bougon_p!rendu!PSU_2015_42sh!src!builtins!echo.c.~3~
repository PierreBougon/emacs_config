/*
** echo.c for echo in /home/bougon_p/rendu/PSU_2015_42sh
**
** Made by bougon_p
** Login   <bougon_p@epitech.net>
**
** Started on  Sun May 29 16:23:51 2016 bougon_p
** Last update Sun May 29 18:38:11 2016 bougon_p
*/

#include <stdbool.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include "42s.h"

int	init_opt(t_echo *opt)
{
  opt->opt_e = false;
  opt->opt_n = false;
  opt->opt_E = true;
  opt->opt_help = false;
  opt->opt_vers = false;
  opt->nb_opt = 3;
  if (!(opt->opt_tab = malloc(sizeof(char) * (opt->nb_opt + 1))))
    return (1);
  opt->opt_tab[0] = 'e';
  opt->opt_tab[1] = 'n';
  opt->opt_tab[2] = 'E';
  opt->opt_tab[3] = 0;
  return (0);
}

bool	version(char *str)
{
  if (strcmp(str, "-version") == 0)
    return (true);
  return (false);
}

bool	help(char *str)
{
  if (strcmp(str, "-help") == 0)
    return (true);
  return (false);
}

bool	opt_exist(char *str, t_echo *opt)
{
  int	i;

  i = -1;
  if ((version(str)) || (help(str)))
    return (true);
  while (str[++i])
    {
      if (str[i] != opt->opt_tab[0]
	  && str[i] != opt->opt_tab[1]
	  && str[i] != opt->opt_tab[2])
	return (false);
    }
  return (true);
}

void	set_opt(t_echo *opt, char op)
{
  if (op == opt->opt_tab[0])
    opt->opt_e = true;
  else if (op == opt->opt_tab[1])
    opt->opt_n = true;
  else if (op == opt->opt_tab[2])
    opt->opt_E = true;
}

bool	check_opt(char *str, t_echo *opt)
{
  int	i;

  i = -1;
  if (!opt_exist(str, opt))
    return (false);
  if (version(str))
    {
      opt->opt_vers = true;
      return (true);
    }
  else if (help(str))
    {
      opt->opt_help = true;
      return (true);
    }
  while (str[++i])
    {
      set_opt(opt, str[i]);
    }
  return (true);
}

void	parse_opt(t_echo *opt, t_sh *sh)
{
  char	**args;
  int	i;

  args = sh->exec->arg;
  i = 0;
  while (args[++i])
    {
      printf("%s\n", args[i]);
      if (args[i][0] == '-')
	check_opt(&args[i][1], opt);
    }
}

void	debug_opt(t_echo *opt)
{
  printf("=== OPT ===\n");
  if (opt->opt_e)
    printf("e = True\n");
  else
    printf("e = False\n");
  if (opt->opt_E)
    printf("E = True\n");
  else
    printf("E = False\n");
  if (opt->opt_n)
    printf("n = True\n");
  else
    printf("n = False\n");
  if (opt->opt_vers)
    printf("vers = True\n");
  else
    printf("vers = False\n");
  if (opt->opt_help)
    printf("help = True\n");
  else
    printf("help = False\n");
  printf("===     ===\n");
}

void	print_help()
{
  printf("echo : Usage : echo [OPTION] [STRINGS]\n\n");
  printf("-n \tdo not output the trailing newline\n");
  printf("-e \tenable interpretation of backslash escapes\n");
  printf("-E \tdisable interpretation of backslash escapes (default)\n");
  printf("--help \tdisplay this help and exit\n");
  printf("--version \toutput version information and exit\n");
}

void	print_echo(t_echo *opt, char **arg)
{
  if (opt->opt_n)
    write(1, "\n", 1);
}

int		my_echo(t_sh *sh)
{
  t_echo	opt;

  init_opt(&opt);
  parse_opt(&opt, sh);
  debug_opt(&opt);
  if (opt.opt_vers)
    {
      printf("%s\n", ECHO_VERSION);
      return (0);
    }
  else if (opt.opt_help)
    {
      print_help();
      return (0);
    }
  else
    {
      print_echo(&opt, sh->exec->arg);
    }
  return (0);
}
