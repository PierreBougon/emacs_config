/*
** get_nl.c for GET_NL in /home/bougon_p/rendu/CPE_2015_getnextline
**
** Made by bougon_p
** Login   <bougon_p@epitech.net>
**
** Started on  Mon Mar  7 23:46:15 2016 bougon_p
** Last update Tue Mar  8 02:33:31 2016 bougon_p
*/

#include "get_next_line.h"
#include <stdio.h>

char	*my_realloc(char *line)
{
  char  *new_line;
  int   size;
  int   i;

  i = 0;
  size = 0;
  while (line[size] != 0)
    size++;
  if ((new_line = malloc(sizeof(char) * (size + READ_SIZE) + 2)) == NULL)
    return (NULL);
  while (i < size)
    {
      new_line[i] = line[i];
      i++;
    }
  while (i < (size + READ_SIZE + 2))
    new_line[i++] = 0;
  free(line);
  return (new_line);
}

int	refill_line(t_file *file, char *buf, int i)
{
  if (i >= READ_SIZE)
    return (0);
  while (++i < READ_SIZE)
    {
      printf("TO REFFIL = %c && i = %d \n", buf[i], i);
      if (buf[i] == '\n')
	return (i % READ_SIZE);
      file->line[file->p++] = buf[i];
    }
  if ((file->line = my_realloc(file->line)) == NULL)
    return (-1);
  return (0);
}

char	*fill_line(t_file *file, int fd, char *buf, int i)
{
  file->nb_char = 1;
  while (file->nb_char != 0)
    {
      if ((file->nb_char = read(fd, buf, READ_SIZE)) == -1 || buf == NULL)
	return (NULL);
      i = -1;
      while (++i < file->nb_char)
	{
	  if (buf[i] == '\n')
	    return (file->line);
	  file->line[file->p++] = buf[i];
	}
      if ((file->line = my_realloc(file->line)) == NULL)
	return (NULL);
    }
  return (NULL);
}

char	*get_next_line(const int fd)
{
  static char	*buf;
  static int	i;
  t_file        file;
  int           n;

  file.p = 0;
  if ((file.line = malloc(sizeof(char) * READ_SIZE + 1)) == NULL)
    return (NULL);
  n = -1;
  while (++n < READ_SIZE + 1)
    file.line[n] = 0;
  if (buf == NULL)
    {
      printf("oui\n");
      if ((buf = malloc(sizeof(char) * READ_SIZE)) == NULL)
	return (NULL);
      i = -1;
      while (++i < READ_SIZE)
	buf[i] = 0;
    }
  else
    {
      printf("i = %d\n", i);
      if (i <= READ_SIZE && i > 0)
	{
	  if ((i = refill_line(&file, buf, i)) == -1)
	    return (NULL);
	  if (i > 0)
	    return (file.line);
	}
    }
  return (fill_line(&file, fd, buf, i));
}

int	main()
{
  char	*s;
  int	fd;
  int	i;

  i = 0;
  fd = open("toto", O_RDONLY);
  while (i++ < 10)
    {
      if ((s = get_next_line(fd)) == NULL)
	return (1);
      printf("%s\n", s);
      free(s);
    }
}
