==17761== Memcheck, a memory error detector
==17761== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==17761== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==17761== Command: ./asm tyron.s
==17761== Parent PID: 4478
==17761== 
==17761== Conditional jump or move depends on uninitialised value(s)
==17761==    at 0x40443D: my_strlen (my_strlen.c:16)
==17761==    by 0x4011FA: write_name (header.c:33)
==17761==    by 0x401358: write_header (header.c:68)
==17761==    by 0x400D1E: parser (parser.c:95)
==17761==    by 0x4008C6: main (main.c:24)
==17761== 
==17761== Conditional jump or move depends on uninitialised value(s)
==17761==    at 0x40443D: my_strlen (my_strlen.c:16)
==17761==    by 0x401222: write_name (header.c:34)
==17761==    by 0x401358: write_header (header.c:68)
==17761==    by 0x400D1E: parser (parser.c:95)
==17761==    by 0x4008C6: main (main.c:24)
==17761== 
==17761== Conditional jump or move depends on uninitialised value(s)
==17761==    at 0x40443D: my_strlen (my_strlen.c:16)
==17761==    by 0x4012C6: write_comment (header.c:57)
==17761==    by 0x401392: write_header (header.c:72)
==17761==    by 0x400D1E: parser (parser.c:95)
==17761==    by 0x4008C6: main (main.c:24)
==17761== 
==17761== Conditional jump or move depends on uninitialised value(s)
==17761==    at 0x40443D: my_strlen (my_strlen.c:16)
==17761==    by 0x4012DB: write_comment (header.c:58)
==17761==    by 0x401392: write_header (header.c:72)
==17761==    by 0x400D1E: parser (parser.c:95)
==17761==    by 0x4008C6: main (main.c:24)
==17761== 
==17761== Invalid write of size 8
==17761==    at 0x400B60: init_instr (parser.c:64)
==17761==    by 0x400D40: parser (parser.c:98)
==17761==    by 0x4008C6: main (main.c:24)
==17761==  Address 0x51fc3e0 is 128 bytes inside a block of size 129 alloc'd
==17761==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==17761==    by 0x400B42: init_instr (parser.c:62)
==17761==    by 0x400D40: parser (parser.c:98)
==17761==    by 0x4008C6: main (main.c:24)
==17761== 
==17761== Use of uninitialised value of size 8
==17761==    at 0x401493: write_code (code.c:45)
==17761==    by 0x400D8C: parser (parser.c:102)
==17761==    by 0x4008C6: main (main.c:24)
==17761== 
==17761== Invalid read of size 8
==17761==    at 0x401493: write_code (code.c:45)
==17761==    by 0x400D8C: parser (parser.c:102)
==17761==    by 0x4008C6: main (main.c:24)
==17761==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==17761== 
==17761== 
==17761== Process terminating with default action of signal 11 (SIGSEGV)
==17761==  Access not within mapped region at address 0x8
==17761==    at 0x401493: write_code (code.c:45)
==17761==    by 0x400D8C: parser (parser.c:102)
==17761==    by 0x4008C6: main (main.c:24)
==17761==  If you believe this happened as a result of a stack
==17761==  overflow in your program's main thread (unlikely but
==17761==  possible), you can try to increase the size of the
==17761==  main thread stack using the --main-stacksize= flag.
==17761==  The main thread stack size used in this run was 8388608.
==17761== 
==17761== HEAP SUMMARY:
==17761==     in use at exit: 479 bytes in 21 blocks
==17761==   total heap usage: 24 allocs, 3 frees, 498 bytes allocated
==17761== 
==17761== LEAK SUMMARY:
==17761==    definitely lost: 155 bytes in 3 blocks
==17761==    indirectly lost: 0 bytes in 0 blocks
==17761==      possibly lost: 0 bytes in 0 blocks
==17761==    still reachable: 324 bytes in 18 blocks
==17761==         suppressed: 0 bytes in 0 blocks
==17761== Rerun with --leak-check=full to see details of leaked memory
==17761== 
==17761== For counts of detected and suppressed errors, rerun with: -v
==17761== Use --track-origins=yes to see where uninitialised values come from
==17761== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 0 from 0)
